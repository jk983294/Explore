/**
 * http://www.simnow.com.cn/product.action
 * http://www.sfit.com.cn/5_2_DocumentDown.htm
 * https://link.zhihu.com/?target=http%3A//download.csdn.net/detail/u010908140/9656275
 * http://download.csdn.net/detail/u010908140/9656275
 * http://download.csdn.net/detail/u010908140/9656314
 */




package com.victor.script.collection;

import java.util.ArrayList;
import java.util.Arrays;

public class ArrayListUsage {

    public static void print(ArrayList<Integer> al){
        for(Integer obj : al){
            System.out.print(obj);
            System.out.print(" ");
        }
        System.out.println();
    }

    public static void main(String[] args) {
        ArrayList<Integer> al = new ArrayList<>();
        ArrayList<Integer> al1 = new ArrayList<>();
        al.add(1);
        al.addAll(Arrays.asList(2, 3, 4, 4, 4, 6, 7, 8, 9));
        al.add(6, 5);                                       // shifts the element currently at that position (if any)

        print(al);

        System.out.println(al.isEmpty());
        System.out.println(al.size());

        System.out.println(al.indexOf(4));                  // 3
        System.out.println(al.lastIndexOf(4));              // 5
        System.out.println(al.indexOf(10));                 // -1

        System.out.println(al.contains(3));                 // true
        System.out.println(al.contains(10));                // false

        al.set(0, 5);
        System.out.println(al.get(0));

        al.remove(8);                                       // remove al[8]
        print(al);
        al.remove(Integer.valueOf(9));                      // remove object 9
        print(al);
        al.clear();
        print(al);


        al.addAll(Arrays.asList(2, 3, 4, 4, 4, 6, 7, 8, 9));
        al1.addAll(Arrays.asList(2, 3));
        al.removeAll(al1);                                  // get A - B
        print(al);
        al.addAll(0, al1);
        print(al);
        al.retainAll(al1);                                  // get A & B
        print(al);
    }

}









package com.victor.script.collection;


import java.util.Arrays;
import java.util.HashSet;

public class HashSetUsage {

    public static void main(String[] args) {
        HashSet<Integer> set = new HashSet<>();
        set.add(1);
        set.addAll(Arrays.asList(2, 3, 4));

        for(Integer i : set){
            System.out.println(i);
        }

        System.out.println(set.isEmpty());
        System.out.println(set.size());

        System.out.println(set.contains(1));
        System.out.println(set.contains(10));

        set.remove(1);
        System.out.println(set.contains(1));
        set.clear();
    }

}









package com.victor.script.collection;


import java.util.Arrays;
import java.util.LinkedHashSet;

public class LinkedHashSetUsage {

    public static void main(String[] args) {
        LinkedHashSet<Integer> set = new LinkedHashSet<>();
        set.add(1);
        set.addAll(Arrays.asList(2, 3, 4));

        for(Integer i : set){                                   // keep insertion order
            System.out.println(i);
        }

        System.out.println(set.isEmpty());
        System.out.println(set.size());

        System.out.println(set.contains(1));
        System.out.println(set.contains(10));

        set.remove(1);
        System.out.println(set.contains(1));
        set.clear();
    }

}














package com.victor.script.collection;

import java.util.Arrays;
import java.util.LinkedList;

public class LinkedListUsage {

    public static void print(LinkedList<Integer> al){
        for(Integer obj : al){
            System.out.print(obj);
            System.out.print(" ");
        }
        System.out.println();
    }

    public static void main(String[] args) {
        LinkedList<Integer> ll = new LinkedList<>();
        LinkedList<Integer> ll1 = new LinkedList<>();
        ll.add(1);
        ll.addAll(Arrays.asList(2, 3, 4, 4, 4, 6, 7, 8, 9));
        ll.add(6, 5);                                       // shifts the element currently at that position (if any)

        print(ll);

        System.out.println(ll.isEmpty());
        System.out.println(ll.size());

        System.out.println(ll.indexOf(4));                  // 3
        System.out.println(ll.lastIndexOf(4));              // 5
        System.out.println(ll.indexOf(10));                 // -1

        System.out.println(ll.contains(3));                 // true
        System.out.println(ll.contains(10));                // false

        ll.set(0, 5);
        System.out.println(ll.get(0));

        ll.remove(8);                                       // remove al[8]
        print(ll);
        ll.remove(Integer.valueOf(9));                      // remove object 9
        print(ll);
        ll.clear();
        print(ll);


        ll.addAll(Arrays.asList(2, 3, 4, 4, 4, 6, 7, 8, 9));
        ll1.addAll(Arrays.asList(2, 3));
        ll.removeAll(ll1);                                  // get A - B
        print(ll);
        ll.addAll(0, ll1);
        print(ll);
        ll.retainAll(ll1);                                  // get A & B
        print(ll);
    }

}











package com.victor.script.collection;


import java.util.*;

public class QueueUsage {

    public static void queueUsage(){
        Queue<Integer> q = new LinkedList<>();
        q.add(1);
        q.offer(2);                                         // preferable for capacity-restricted queue

        System.out.println(q.isEmpty());
        System.out.println(q.size());

        System.out.println(q.peek());                       // get but don't remove, return null when empty
        System.out.println(q.element());                    // get but don't remove, throw exception when empty

        System.out.println(q.poll());                       // return null when empty
        System.out.println(q.remove());                     // throw exception when empty

        // better to use offer/peek/poll along with isEmpty/size
    }

    public static void dequeUsage(){
        Deque<Integer> q = new LinkedList<>();
        q.offerFirst(1);
        q.offerLast(2);

        System.out.println(q.isEmpty());
        System.out.println(q.size());

        System.out.println(q.peekFirst());
        System.out.println(q.peekLast());

        System.out.println(q.pollFirst());
        System.out.println(q.pollLast());
    }

    static class BigIntegerFirstComparator implements Comparator<Integer> {
        @Override
        public int compare(Integer e1, Integer e2) {
            return -e1.compareTo(e2);
        }
    }

    /**
     * default priority is small first
     */
    public static void priorityQueueUsage(){
        PriorityQueue<Integer> q = new PriorityQueue<>(10, new BigIntegerFirstComparator());
        q.offer(1);
        q.offer(2);

        System.out.println(q.isEmpty());
        System.out.println(q.size());

        System.out.println(q.peek());

        System.out.println(q.poll());
        System.out.println(q.poll());
    }

    public static void main(String[] args) {
        queueUsage();
        dequeUsage();
        priorityQueueUsage();
    }

}












package com.victor.script.collection;

import java.util.ArrayDeque;

public class StackUsage {

    public static void main(String[] args) {
        ArrayDeque<Integer> stack = new ArrayDeque<>();
        stack.offerLast(2);
        stack.offerLast(1);

        System.out.println(stack.isEmpty());
        System.out.println(stack.size());

        System.out.println(stack.peekLast());           // 1

        System.out.println(stack.pollLast());           // 1
        System.out.println(stack.pollLast());           // 2
    }

}











package com.victor.script.collection;


import java.util.Arrays;
import java.util.Comparator;
import java.util.TreeSet;

public class TreeSetUsage {

    static class BigIntegerFirstComparator implements Comparator<Integer> {
        @Override
        public int compare(Integer e1, Integer e2) {
            return -e1.compareTo(e2);
        }
    }

    public static void main(String[] args) {
        TreeSet<Integer> set = new TreeSet<>(new BigIntegerFirstComparator());
        set.add(1);
        set.addAll(Arrays.asList(2, 3, 4));

        for(Integer i : set){                           // differ from HashSet, it is sorted
            System.out.println(i);
        }

        System.out.println(set.isEmpty());
        System.out.println(set.size());

        System.out.println(set.contains(1));
        System.out.println(set.contains(10));

        set.remove(1);
        System.out.println(set.contains(1));
        set.clear();
    }

}
