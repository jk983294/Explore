/**
 * http://www.simnow.com.cn/product.action
 * http://www.sfit.com.cn/5_2_DocumentDown.htm
 * https://link.zhihu.com/?target=http%3A//download.csdn.net/detail/u010908140/9656275
 * http://download.csdn.net/detail/u010908140/9656275
 * http://download.csdn.net/detail/u010908140/9656314
 */



<input type="checkbox" ng-model="confirmed" ng-change="change()" id="ng-change-example1" />
$scope.change = function() {
        $scope.counter++;
      };


package com.victor.script.collection.map;


import java.util.HashMap;

public class HashMapUsage {

    public static void main(String[] args) {
        HashMap<Integer, Integer> map = new HashMap<>();
        map.put(1, 1);
        map.put(2, 2);
        map.put(3, 3);
        map.put(4, 4);
        map.put(null, 5);

        for(Integer i : map.keySet()){
            System.out.println(i + " -> " + map.get(i));
        }

        System.out.println(map.isEmpty());
        System.out.println(map.size());

        System.out.println(map.containsKey(null));
        System.out.println(map.containsKey(1));
        System.out.println(map.containsValue(10));

        map.remove(1);
        System.out.println(map.containsKey(1));
        map.clear();
    }

}










package com.victor.script.collection.map;



import java.util.LinkedHashMap;

public class LinkedHashMapUsage {

    public static void main(String[] args) {
        LinkedHashMap<Integer, Integer> map = new LinkedHashMap<>();
        map.put(1, 1);
        map.put(2, 2);
        map.put(3, 3);
        map.put(4, 4);
        map.put(null, 5);

        for(Integer i : map.keySet()){
            System.out.println(i + " -> " + map.get(i));
        }

        System.out.println(map.isEmpty());
        System.out.println(map.size());

        System.out.println(map.containsKey(null));
        System.out.println(map.containsKey(1));
        System.out.println(map.containsValue(10));

        map.remove(1);
        System.out.println(map.containsKey(1));
        map.clear();
    }

}








package com.victor.script.collection.map;


import java.util.*;

public class TreeMapUsage {

    public static Map<Integer, Integer> sortByValues() {
        final TreeMap<Integer, Integer> map = new TreeMap<>();
        map.put(1, 4);
        map.put(2, 3);
        map.put(3, 2);
        map.put(4, 1);

        Comparator<Integer> valueComparator = new Comparator<Integer>() {
            public int compare(Integer k1, Integer k2) {
                int compare = map.get(k1).compareTo(map.get(k2));
                if (compare == 0)
                    return 1;
                else
                    return compare;
            }
        };

        Map<Integer, Integer> sortedByValues = new TreeMap<>(valueComparator);
        sortedByValues.putAll(map);

        for(Integer i : sortedByValues.keySet()){
            System.out.println(i + " -> " + map.get(i));
        }
        return sortedByValues;
    }

    public static void reverseOrder(){
        Map<Integer, Integer> map = new TreeMap<>(Collections.reverseOrder());
        map.put(1, 1);
        map.put(2, 2);
        map.put(3, 3);
        map.put(4, 4);
        for(Integer i : map.keySet()){
            System.out.println(i + " -> " + map.get(i));
        }
    }

    public static void main(String[] args) {
        TreeMap<Integer, Integer> map = new TreeMap<>();
        map.put(1, 1);
        map.put(2, 2);
        map.put(3, 3);
        map.put(4, 4);
        // map.put(null, 5);                                    // can not contains null key
        // System.out.println(map.containsKey(null));           // can not contains null key

        for(Integer i : map.keySet()){
            System.out.println(i + " -> " + map.get(i));
        }

        System.out.println(map.isEmpty());
        System.out.println(map.size());

        System.out.println(map.firstKey());
        System.out.println(map.lastKey());

        System.out.println(map.containsKey(1));
        System.out.println(map.containsValue(10));

        SortedMap<Integer, Integer> s1 = map.subMap(1, 3);          // [1, 3)
        for(Integer i : s1.keySet()){
            System.out.println(i + " -> " + map.get(i));
        }

        SortedMap<Integer, Integer> s2 = map.tailMap(1);            // [1, 4]
        for(Integer i : s2.keySet()){
            System.out.println(i + " -> " + map.get(i));
        }

        map.remove(1);
        System.out.println(map.containsKey(1));
        map.clear();

        reverseOrder();
        sortByValues();
    }

}









package com.victor.script.collection.map;


import java.util.WeakHashMap;

public class WeakHashMapUsage {

    public static void main (String args[]) {
        final WeakHashMap map = new WeakHashMap();
        map.put(new String("Maine"), "Augusta");

        Runnable runner = new Runnable() {
            public void run() {
                while (map.containsKey("Maine")) {
                    try {
                        Thread.sleep(500);
                    }catch (InterruptedException ignored) {
                    }
                    System.out.println("Thread waiting");

                    /**
                     * allows a key-value pair to be garbage-collected
                     * when its key is no longer referenced outside of the WeakHashMap.
                     */
                    System.gc();
                }
            }
        };
        Thread t = new Thread(runner);
        t.start();
        System.out.println("Main waiting");
        try {
            t.join();
        }catch (InterruptedException ignored) {
        }
    }

}









package com.victor.script.collection.util;

import java.util.Arrays;
import java.util.List;

public class ArraysUsage {

    public static void main(String[] args) {
        List<Integer> list = Arrays.asList(1, 2, 3, 4);

        int[] a1 = {9, 2, 7, 4, 3, 4, 5, 8, 2, 10};
        int[] a2 = {1, 2, 3, 4, 4, 4, 7, 8, 9, 10};
        int[] a3 = new int[5];

        Arrays.sort(a1);                                        // 2 2 3 4 4 5 7 8 9 10
        for(int i = 0; i < a1.length; i++){
            System.out.print(a1[i] + " ");
        }
        System.out.println();

        System.out.println(Arrays.binarySearch(a2, 2));
        System.out.println(Arrays.binarySearch(a2, 4));
        System.out.println(Arrays.binarySearch(a2, 6));
        System.out.println(Arrays.binarySearch(a2, 11));



        Arrays.fill(a3, 4);                                     // 4 4 4 4 4
        Arrays.fill(a3, 0, 2, 8);                               // 8 8 4 4 4

        int[] a4 = Arrays.copyOf(a3, 7);                        // 8 8 4 4 4 0 0
        int[] a5 = Arrays.copyOf(a3, 3);                        // 8 8 4
        int[] a6 = Arrays.copyOfRange(a3, 1, 3);                // 8 4


        System.out.println(Arrays.equals(a1, a2));
        System.out.println(Arrays.hashCode(a1));
        System.out.println(Arrays.toString(a1));

        /**
         * for object equals, hash code, toString
         */
//        Arrays.deepEquals();
//        Arrays.deepHashCode();
//        Arrays.deepToString();
    }
}










package com.victor.script.collection.util;

import java.util.*;

public class CollectionsUsage {

    static class BigIntegerFirstComparator implements Comparator<Integer> {
        @Override
        public int compare(Integer e1, Integer e2) {
            return -e1.compareTo(e2);
        }
    }

    public static void main(String[] args) {
        List<Integer> l1 = new ArrayList<>(Arrays.asList(9, 2, 7, 4, 3, 4, 5, 8, 2, 10));
        List<Integer> l2 = new ArrayList<>(Arrays.asList(1, 2, 3, 4, 4, 4, 7, 8, 9, 10));


        Collections.sort(l1);                                           // 2 2 3 4 4 5 7 8 9 10
        Collections.sort(l1, new BigIntegerFirstComparator());          // 10 9 8 7 5 4 4 3 2 2
        Comparator smallFirst = Collections.reverseOrder(new BigIntegerFirstComparator());
        Collections.sort(l1, smallFirst);                               // 2 2 3 4 4 5 7 8 9 10
        for(int i = 0; i < l1.size(); i++){
            System.out.print(l1.get(i) + " ");
        }
        System.out.println();

        System.out.println(Collections.max(l2));
        System.out.println(Collections.min(l2));

        System.out.println(Collections.binarySearch(l2, 2));
        System.out.println(Collections.binarySearch(l2, 4));
        System.out.println(Collections.binarySearch(l2, 6));
        System.out.println(Collections.binarySearch(l2, 11));

        List<Integer> l3 = new ArrayList<>(l2);
        Collections.fill(l3, 4);                                        // 4 4 4 4 4 4 4 4 4 4
        List<Integer> l4 = Collections.nCopies(3, 4);                   // 4 4 4

        Collections.replaceAll(l3, 4, 5);                               // 5 5 5 5 5 5 5 5 5 5

        Collections.reverse(l1);                                        // 10 9 8 7 5 4 4 3 2 2
        Collections.rotate(l1, 3);                                      // 3 2 2 10 9 8 7 5 4 4
        Collections.rotate(l1, -3);                                     // 10 9 8 7 5 4 4 3 2 2
        Collections.swap(l1, 0, 1);                                     // 9 10 8 7 5 4 4 3 2 2

        Collections.shuffle(l3);

        Set<Integer> s = Collections.singleton(1);
        List<Integer> l = Collections.singletonList(1);
        Map<Integer, Integer> m = Collections.singletonMap(1, 1);

        Set<Integer> ss = Collections.synchronizedSet(s);
        List<Integer> sl = Collections.synchronizedList(l);
        Map<Integer, Integer> sm = Collections.synchronizedMap(m);

        Set<Integer> us = Collections.unmodifiableSet(s);
        List<Integer> ul = Collections.unmodifiableList(l);
        Map<Integer, Integer> um = Collections.unmodifiableMap(m);
    }

}

















package com.victor.script.file;


public class FileNode {

    public String relativePath;         // relative relativePath to root
    public String path;                 // absolute path
    public long lastModified;
    public long fileSize;

    public FileNode(String path, String relativePath, long lastModified, long fileSize) {
        this.path = path;
        this.relativePath = relativePath;
        this.lastModified = lastModified;
        this.fileSize = fileSize;
    }

    public String getRelativePath() {
        return relativePath;
    }

    public void setRelativePath(String relativePath) {
        this.relativePath = relativePath;
    }

    public long getLastModified() {
        return lastModified;
    }

    public void setLastModified(long lastModified) {
        this.lastModified = lastModified;
    }

    public long getFileSize() {
        return fileSize;
    }

    public void setFileSize(long fileSize) {
        this.fileSize = fileSize;
    }

    public String getPath() {
        return path;
    }

    public void setPath(String path) {
        this.path = path;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof FileNode)) return false;

        FileNode node = (FileNode) o;

        if (relativePath != null ? !relativePath.equals(node.relativePath) : node.relativePath != null) return false;

        return true;
    }

    @Override
    public int hashCode() {
        return relativePath != null ? relativePath.hashCode() : 0;
    }
}












package com.victor.script.file;

import org.apache.commons.collections.CollectionUtils;

import java.io.File;
import java.io.IOException;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import java.util.TreeSet;

public class FileTree {

    public String root;

    public boolean isRootValid = false;

    public Map<String, FileNode> relativePath2files;

    public Set<String> excludeFiles;

    public FileTree(String root) {
        this.root = root;
    }

    public void collect() throws IOException {
        relativePath2files = new TreeMap<>();
        File rootFile = new File(root);
        isRootValid = rootFile.exists() && rootFile.isDirectory();
        if(isRootValid){
            collect(rootFile);
        }
    }

    private void collect(File file) throws IOException {
        if ( file.isDirectory() ) {
            for(File f : file.listFiles()){
                if(CollectionUtils.isEmpty(excludeFiles) || !excludeFiles.contains(f.getCanonicalPath())){
                    collect(f);
                }
            }
        } else if(!file.isHidden() && file.canRead() && file.canWrite() && file.isFile()){
            if(CollectionUtils.isEmpty(excludeFiles) || !excludeFiles.contains(file.getCanonicalPath())){
                String relative = file.toURI().relativize(new File(root).toURI()).getPath();
                FileNode node = new FileNode(file.getCanonicalPath(), relative, file.lastModified(), file.length());
                relativePath2files.put(relative, node);
            }
        }
    }

    public String getRoot() {
        return root;
    }

    public void setRoot(String root) {
        this.root = root;
    }

    public boolean isRootValid() {
        return isRootValid;
    }

    public void setRootValid(boolean isRootValid) {
        this.isRootValid = isRootValid;
    }

    public Map<String, FileNode> getRelativePath2files() {
        return relativePath2files;
    }

    public void setRelativePath2files(Map<String, FileNode> relativePath2files) {
        this.relativePath2files = relativePath2files;
    }

    public Set<String> getExcludeFiles() {
        return excludeFiles;
    }

    public void setExcludeFiles(Set<String> excludeFiles) {
        this.excludeFiles = excludeFiles;
    }
}










package com.victor.script.file;


import org.apache.commons.collections.CollectionUtils;

import java.io.*;
import java.nio.channels.FileChannel;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public class LocalFileSyncer {

    public static final long DEFAULT_COPY_BUFFER_SIZE = 16 * 1024 * 1024;

    public List<FileTree> fileTrees = new ArrayList<>();

    public LocalFileSyncer(List<String> paths) {
        if(CollectionUtils.isNotEmpty(paths)){
            for(String path : paths)
                fileTrees.add(new FileTree(path));
        }
    }

    public void sync() {
        for(FileTree fileTree : fileTrees){
            collect(fileTree);
        }

        for(int i = 0; i < fileTrees.size(); i++){
            for(int j = i + 1; j < fileTrees.size(); j++){
                sync(fileTrees.get(i), fileTrees.get(j));
                sync(fileTrees.get(j), fileTrees.get(i));
            }
        }
    }

    public void sync(FileTree src, FileTree dest) {
        if(src.isRootValid() && dest.isRootValid()){
            Map<String, FileNode> destNodes = dest.getRelativePath2files();
            for(FileNode srcNode : src.getRelativePath2files().values()){
                if(!destNodes.containsKey(srcNode.relativePath)
                        || srcNode.lastModified > destNodes.get(srcNode.relativePath).lastModified){
                    copyFile(new File(srcNode.getPath()), new File(dest.getRoot() + srcNode.relativePath));
                }
            }
        }
    }

    public void collect(FileTree tree){
        try {
            tree.collect();
        } catch (IOException e) {
            System.out.println("error when collect for " + tree.getRoot());
        }
    }

    private void copyFile(File srcFile, File destFile) {
        try (FileInputStream is = new FileInputStream( srcFile );
             FileOutputStream os = new FileOutputStream( destFile, false )) {
            FileChannel iChannel = is.getChannel();
            FileChannel oChannel = os.getChannel();
            long doneBytes = 0L;
            long todoBytes = srcFile.length();
            while ( todoBytes != 0L ) {
                long iterationBytes = Math.min( todoBytes, DEFAULT_COPY_BUFFER_SIZE );
                long transferredLength = oChannel.transferFrom( iChannel, doneBytes, iterationBytes );
                if ( iterationBytes != transferredLength ) {
                    throw new IOException("Error during file transfer: expected " + iterationBytes
                            + " bytes, only " + transferredLength + " bytes copied.");
                }
                doneBytes += transferredLength;
                todoBytes -= transferredLength;
            }
        } catch (IOException e) {
            System.out.println("Could not copy file from {} -> {} " + destFile);
        }
        boolean successTimestampOp = destFile.setLastModified( srcFile.lastModified() );
        if ( !successTimestampOp ) {
            System.out.println("Could not change timestamp for {}. Index synchronization may be slow. " + destFile );
        }
    }


}










package com.victor.script.file;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.channels.FileChannel;
import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;


/**
 * Utility class for synchronizing files/directories.
 */
public abstract class FileHelper {

    private static final int FAT_PRECISION = 2000;
    public static final long DEFAULT_COPY_BUFFER_SIZE = 16 * 1024 * 1024;


    public static boolean areInSync(File source, File destination) throws IOException {
        if ( source.isDirectory() ) {
            if ( !destination.exists() ) {
                return false;
            }
            else if ( !destination.isDirectory() ) {
                throw new IOException(
                        "Source and Destination not of the same type:"
                                + source.getCanonicalPath() + " , " + destination.getCanonicalPath()
                );
            }
            String[] sources = source.list();
            Set<String> srcNames = new HashSet<String>( Arrays.asList( sources ) );
            String[] dests = destination.list();

            // check for files in destination and not in source
            for ( String fileName : dests ) {
                if ( !srcNames.contains( fileName ) ) {
                    return false;
                }
            }

            boolean inSync = true;
            for ( String fileName : sources ) {
                File srcFile = new File( source, fileName );
                File destFile = new File( destination, fileName );
                if ( !areInSync( srcFile, destFile ) ) {
                    inSync = false;
                    break;
                }
            }
            return inSync;
        }
        else {
            if ( destination.exists() && destination.isFile() ) {
                long sts = source.lastModified() / FAT_PRECISION;
                long dts = destination.lastModified() / FAT_PRECISION;
                return sts == dts;
            }
            else {
                return false;
            }
        }
    }

    public static void synchronize(File source, File destination, boolean smart) throws IOException {
        synchronize( source, destination, smart, DEFAULT_COPY_BUFFER_SIZE );
    }

    public static void synchronize(File source, File destination, boolean smart, long chunkSize) throws IOException {
        if ( chunkSize <= 0 ) {
            System.out.println("Chunk size must be positive: using default value." );
            chunkSize = DEFAULT_COPY_BUFFER_SIZE;
        }
        if ( source.isDirectory() ) {
            if ( !destination.exists() ) {
                if ( !destination.mkdirs() ) {
                    throw new IOException( "Could not create relativePath " + destination );
                }
            }
            else if ( !destination.isDirectory() ) {
                throw new IOException(
                        "Source and Destination not of the same type:"
                                + source.getCanonicalPath() + " , " + destination.getCanonicalPath()
                );
            }
            String[] sources = source.list();
            Set<String> srcNames = new HashSet<String>( Arrays.asList( sources ) );
            String[] dests = destination.list();

            //delete files not present in source
            for ( String fileName : dests ) {
                if ( !srcNames.contains( fileName ) ) {
                    delete( new File( destination, fileName ) );
                }
            }
            //copy each file from source
            for ( String fileName : sources ) {
                File srcFile = new File( source, fileName );
                File destFile = new File( destination, fileName );
                synchronize( srcFile, destFile, smart, chunkSize );
            }
        }
        else {
            if ( destination.exists() && destination.isDirectory() ) {
                delete( destination );
            }
            if ( destination.exists() ) {
                long sts = source.lastModified() / FAT_PRECISION;
                long dts = destination.lastModified() / FAT_PRECISION;
                //do not copy if smart and same timestamp and same length
                if ( !smart || sts == 0 || sts != dts || source.length() != destination.length() ) {
                    copyFile( source, destination, chunkSize );
                }
            }
            else {
                copyFile( source, destination, chunkSize );
            }
        }
    }

    private static void copyFile(File srcFile, File destFile, long chunkSize) throws IOException {
        FileInputStream is = null;
        FileOutputStream os = null;
        try {
            is = new FileInputStream( srcFile );
            FileChannel iChannel = is.getChannel();
            os = new FileOutputStream( destFile, false );
            FileChannel oChannel = os.getChannel();
            long doneBytes = 0L;
            long todoBytes = srcFile.length();
            while ( todoBytes != 0L ) {
                long iterationBytes = Math.min( todoBytes, chunkSize );
                long transferredLength = oChannel.transferFrom( iChannel, doneBytes, iterationBytes );
                if ( iterationBytes != transferredLength ) {
                    throw new IOException(
                            "Error during file transfer: expected "
                                    + iterationBytes + " bytes, only " + transferredLength + " bytes copied."
                    );
                }
                doneBytes += transferredLength;
                todoBytes -= transferredLength;
            }
        }
        finally {
            if ( is != null ) {
                is.close();
            }
            if ( os != null ) {
                os.close();
            }
        }
        boolean successTimestampOp = destFile.setLastModified( srcFile.lastModified() );
        if ( !successTimestampOp ) {
            System.out.println("Could not change timestamp for {}. Index synchronization may be slow. " + destFile );
        }
    }

    public static void delete(File file) {
        if ( file.isDirectory() ) {
            for ( File subFile : file.listFiles() ) {
                delete( subFile );
            }
        }
        if ( file.exists() ) {
            if ( !file.delete() ) {
                System.out.println( "Could not delete {}" + file );
            }
        }
    }
}
